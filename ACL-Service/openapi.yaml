openapi: "3.0.3"
info:
  title: Access control Microservice

  version: "1.0.0"
  # description:
servers:
  - url: http://localhost:8081
paths:
  /role/{roleId}:
    get:
      tags:
        - Access Control
      summary: Checking access of users
      description: Getting access list of all users
      parameters:
        - name: 'roleId'
          in: path
          required: true
          description: check for access rights of a user
          schema:
            type: string 
        - name: 'number'
          in: query
          required: true
          description: check for access request
          example: "1"
          schema:
            type: string 
      responses:
        '200':
          description: access allowed

        '401':
            description: Not authorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Not authorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: server not working

  /role:
    post:
      tags:
        - Access Control
      summary: Creating new role
      description: Creating new role by admin
      parameters:
        - name: 'role'
          in: query
          required: true
          description: name/title of role 
          schema:
            type: string 
      requestBody:
        description: Request for creating new role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleSchemaRequest'
        required: true
        
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleSchema'

        '401':
            description: Not authorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Not authorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: server not working   

    get:
      tags:
        - Access Control
      summary: Getting list of all roles
      description: Getting list of all roles

      responses:
        '200':
          description: get all roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleSchema'

        '401':
            description: Not authorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Not authorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: server not working




components:
  schemas:
    
    RoleSchema:
      type: object
      properties:
        uuid: 
          type: string
        title: 
          type: string
        accessRights: 
          type: array

    RoleSchemaRequest:
      type: array
      items:
        type: number



