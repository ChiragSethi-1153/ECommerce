openapi: "3.0.3"
info:
  title: Auth Microservice

  version: "1.0.0"
  description: Microservice for user authorizations
servers:
  - url: http://localhost:8082
paths:
  /auth/signup:
    post:
      tags:
        - Auth
      summary: Create a new user
      description: Creates a new user
      requestBody:
        description: Request to create User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchemaSignup'
        required: true
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchemaSignupResponse'
        '409':
            description: Bad Request/User already exists! Login instead
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: User already exists! Login instead
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: server not working

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login for existing user
      description: User can login in its account
      requestBody:
        description: Request to match details of user with database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchemaLogin'
        required: true
      responses:
        '200':
          description: LoggedIn successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchemaLoginResponse'
        '404':
            description: User not found/Email doesn't exist 
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: User doesn't exists! Signup instead
        '400':
          description: Invalid credentials
          content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Invalid Password
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: server not working

  /auth/password:
    put:
      tags:
        - Auth
      summary: Update password for user
      description: Update password for user
      security:
      - bearerAuth: ['#/components/securitySchemes/bearerAuth']
      requestBody:
        description: existing password and new password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRequest'
        required: true
      responses:
        '201':
          description: Password changed successfully
        '401':
            description: Not authorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Not authorized
        '409':
            description: Bad Request/Password already exists! 
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: User already exists! Login instead
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: server not working




components:
  schemas:
    
    AuthSchema: 
      type: object
      properties:
        userId:
         type: string
        name:
          type: string
          example: "name"
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        role: 
          type: string
        status:
          type: string
          enum:
            - Active
            - Deactivated


    UserSchemaSignup:
      type: object
      properties:
        name:
          type: string
          example: "user"
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        role: 
          type: string
          enum:
            - user
            - vendor
      required:
        - name
        - email
        - password
        - role
      
    UserSchemaSignupResponse:
      type: object
      properties:
        name:
          type: string
          example: "name"
        email:
          type: string
          format: email
        role: 
          type: string


    UserSchemaLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password

    UserSchemaLoginResponse:
      type: object
      properties:
        uuid: 
          type: string
          example: ad7dcc90-e9b1-11ee-a1f8-596ad2442ba6
        name: 
          type: string
          example: user
        email:
          type: string
          format: email
        role: 
          type: string
          example: user
        status: 
          type: string
          example: Active

    PasswordRequest:
      type: object
      properties:
        existingPassword:
          type: string
        newPassword:
          type: string
    
  securitySchemes:
    bearerAuth:  
      type: http
      scheme: bearer
      bearerFormat: JWT
        
