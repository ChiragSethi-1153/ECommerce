openapi: "3.0.3"
info:
  title: Order Microservice

  version: "1.0.0"
  # description:
servers:
  - url: http://localhost:8084
paths:


  /orders:
    get:
      tags:
        - Orders     
      summary: Getting all orders
      description: Getting list of all orders
      parameters:
        - name: 'searchBody'
          in: query
          required: false
          description: search result for orders, can contain order name, user name, description, user 
          example: "abc"
          schema:
            type: string 
      responses:
        '200':
          description: details found and returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
        '404':
            description: Orders not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: No Orders found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: server not working
      
    post:
      tags:
        - Orders
      summary: Adding of new order by user
      description: Adding new order by user
      parameters:
        - name: 'uuid'
          in: query
          required: true
          description: uuid of user
          example: "00a6fa25-df29-4701-9077-557932591766"
          schema:
            type: string
      requestBody:
        description: Request to create new order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSchema'
        required: true
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
        '401':
          description: user not authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: user not authorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: server not working

    put:
      tags:
        - Orders
      parameters:
        - name: 'uuid'
          in: query
          required: true
          description: The uuid of order
          example: "00a6fa25-df29-4701-9077-557932591766"
          schema:
            type: string
        - name: 'uuid'
          in: query
          required: true
          description: The uuid of user
          example: "00a6fa25-df29-4701-9077-557932591766"
          schema:
            type: string
      summary: Edit the order details
      description: Edit the order details 
      requestBody:
        description: Request to edit order details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditOrderRequest'
      responses:
        '200':
          description: order details updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: order details edited successfully.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: order not found
        '401':
          description: user not authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: user not authorized
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided uuid is not valid
        
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    
  /orders/{uuid}:
    get:
      tags:
        - Orders
      parameters:
        - name: 'uuid'
          in: path
          required: true
          description: The uuid of orders
          example: "00a6fa25-df29-4701-9077-557932591766"
          schema:
            type: string
      summary: Getting details of a orders
      description: Getting details of a orders
      responses:
        '200':
          description: details of a particular order found and returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
        '404':
            description: order not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: order not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: server not working

    
    
              

    delete:
      tags:
        - Orders
      parameters:
        - name: 'uuid'
          in: path
          required: true
          description: The uuid of order
          example: "00a6fa25-df29-4701-9077-557932591766"
          schema:
            type: string
        - name: 'uuid'
          in: query
          required: true
          description: The uuid of user
          example: "00a6fa25-df29-4701-9077-557932591766"
          schema:
            type: string
      summary: delete the order 
      description: delete the order  
      responses:
        '200':
          description: order deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: order deleted successfully.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: order not found
        '400':
          description: Invalid request 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided uuid is not valid
        '401':
          description: user not authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: user not authorized

        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string


components:
  schemas:

    OrderSchema:
      type: object
      properties:
        user: 
          type: string
        orders:
          type: array
          items:
            type: string
        payment:
          type: string
        status:
          type: string
          enum: 
            - placed
            - cancelled
            - fulfilled
            - returned
            - exchanged
    
    EditOrderRequest:
      type: object
      properties:
        orders:
          type: array
          items:
            type: string
        payment:
          type: string
        status:
          type: string
          enum: 
            - placed
            - cancelled
            - fulfilled
            - returned
            - exchanged


    ProductSchema:
      type: object
      properties:
        uuid:
          type: string
          example: "00a6fa25-df29-4701-9077-557932591766"
        category:
          type: string
        name:
          type: string
          example: "name"
        description: 
          type: string
          example: "description"
        stock:
          type: number
          example: '12'
        user:
          type: string
          example: "00a6fa25"
        orderImages:
          type: array
          items: 
            type: string
      required:
        - uuid
        - category
        - name
        - description
        - user
        - stock


    UserSchema:
        type: object
        properties:
          uuid:
            type: string
            example: "00a6fa25-df29-4701-9077-557932591766"
          name:
            type: string
            example: "name"
          email:
            type: string
            format: email
          address:
            type: array
            items: 
              type: object
              properties:
                area: 
                  type: string
                city:
                  type: string
                state:
                  type: string
                pincode:
                  type: string
          phone:
            type: string
          profileImage:
            type: string
          role:
            type: string
            enum: 
            - vendor
            - super admin
            - user
            - deliveryPartner
            - deliveryPerson
            default: user

    
    PaymentSchema:
      type: object
      properties:
        total:
          type: number
        method:
          type: string
          enum:
            - cash
            - UPI
            - NetBanking